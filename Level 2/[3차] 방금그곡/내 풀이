# 시간차 구할 때 쓰기위해 import
import datetime

def solution(m, musicinfos):
    # 사용되는 모든 음계를 사전으로 정의했는데 좀 과했음 #붙은 것만 해도 됐을듯(E#은 문제에는 안 나와있는데 안 넣으면 27번이 런타임에러떠서 추가함)
    scale = {'C':'1', 'C#':'2', 'D':'3', 'D#':'4', 'E':'5', 'F':'6', 'F#':'7', 'G':'8', 'G#':'9', 'A':'A', 'A#':'B', 'B':'C', 'E#': 'D'}
    
    # 매개변수 m을 사전을 이용해서 치환하는 부분
    temp_scale = ''
    while len(m):
      if m[0] == m[-1] and len(m) == 1:
        temp_scale += scale[m[0]]
        m = m[1:]
      else:
        if m[1] == '#':
          temp_scale += scale[m[0]+m[1]]
          m = m[2:]
        else:
          temp_scale += scale[m[0]]
          m = m[1:]
    
    m = temp_scale
    
    # 답을 넣을 answer와 (,)를 기준으로 잘라서 넣을 processing_info를 선언
    answer = []
    processing_info = []
    
    # processing_info에 (,)를 기준으로 잘라서 넣음
    for x in musicinfos:
      processing_info.append(x.split(',')) 
    
    # processing_info를 순회하면서 주어진 음계를 사전을 이용해서 치환하고, 시작시간과 종료시간 사이의 차를 구하고, 치환된 음계를 시간차만큼 곱해서 리스트 뒤에 추가함
    for x in processing_info:
      # 주어진 음계를 사전을 이용해서 치환하는 부분
      temp_scale = ''

      while len(x[3]):
        if x[3][0] == x[3][-1] and len(x[3]) == 1:
          temp_scale += scale[x[3][0]]
          x[3] = x[3][1:]
        else:
          if x[3][1] == '#':
            temp_scale += scale[x[3][0]+x[3][1]]
            x[3] = x[3][2:]
          else:
            temp_scale += scale[x[3][0]]
            x[3] = x[3][1:]

      x[3] = temp_scale
      
      # 시작시간과 종료시간 사이의 차를 구하는 부분
      x.append((datetime.datetime.strptime(x[1],"%M:%S") - datetime.datetime.strptime(x[0],"%M:%S")).seconds)

      # 치환된 음계를 시간차만큼 곱하는 부분
      if x[4] > len(x[3]):
        x.append(x[3]*(x[4]//len(x[3]))+x[3][:x[4]%len(x[3])])
      else:
        x.append(x[3][:x[4]])
      
      # 현재 x에 m이 포함되어 있는 지 확인하는 부분
      if m in x[5]:
        answer.append([x[2], x[4]])

    # 포함되어있는 곡이 많다면 정렬을 시간순, 내림차순으로 함
    if len(answer) > 1:
      answer = sorted(answer, key=lambda x : x[1], reverse=True)
    
    # 포함된 것이 없을 때는 '(None)'을 return, 있을 때는 가장 처음에 있는 리스트의 첫 번째 요소를 return
    return answer[0][0] if len(answer) else '(None)'
