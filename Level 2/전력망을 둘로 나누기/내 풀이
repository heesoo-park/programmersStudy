# 예시만 풀 수 있었던 야매코드
def solution(n, wires):
    tree = [0]*n
    answer = 0

    for x in wires:
      if tree[x[0]-1] != 0:
        answer += 1
      tree[x[0]-1] = x[1]
      
    return answer

# 그래프랑 트리, bfs, dfs 다 몰라서 끝내 구글링으로 보고 이해하려고 한 코드
def solution(n, wires):
    # 인덱스의 숫자와 연결된 노드를 나열한 인접행렬
    adj_mat = [[] for _ in range(n)]
    answer = 100
    
    # 인접행렬 요소 추가
    for a, b in wires:
      adj_mat[a-1].append(b)
      adj_mat[b-1].append(a)
    
    # 인접행렬의 모든 요소 순회
    for i in range(n):
      for j in range(len(adj_mat[i])):
        # 간선을 잘라서 나눠진 두 개의 그래프로 노드 개수의 차이를 구한 뒤 다시 붙히기
        tmp = adj_mat[i][j]
        adj_mat[i].remove(tmp)
        if adj_mat[i]:
          cur_state = connect_tree(adj_mat[i], i, adj_mat)
          answer = min(answer, abs(cur_state.count(0)-cur_state.count(1)))
        adj_mat[i] = [tmp] + adj_mat[i]

    return answer

def connect_tree(target, i, matrix):
  stack = []
  for i in target:
    stack.append(i)
  # 연결 여부를 확인하는 리스트
  visit = [0]*len(matrix)
  visit[i-1] = 1
  while stack:
    a = stack.pop()
    # 현재 a와 연결된 노드들이 들어있는 리스트로 가서 가져오고 연결된 노드들에 붙어있는 노드가 또 있다면 stack에 
    for i in matrix[a-1]:
      if visit[i-1] == 0:
        stack.append(i)
        visit[i-1] = 1
  
  return visit
